ideas:
 * Consider hidden/system file marker in redirection for deletion, similar to what ILV does.
 * Check out CreateFile on C:\CONOUT$ in Calibre.  Returns with invalid handle? MVR.
 * Psf is unaware of SPC.  This means that FRF/MFR determine redirection area on package level of
       the launched app rather than container folder for redirection.  Not breaking anything currently, but ugh!
*  SPC seems to immedietly fail PsfLauncher if Ilv is set in package.
*  Psf FRF/MFR make assumptions that it can use the package path if the file looks like it is in the package path 
       using PathExits.  FindFile works also.  GetFileAttributes and CreateFile, however, need the call to use the native path.
	   This might be a bug, and we might be able to work around it for the folders that map like Program Files, but not
	   for non-mapped native folders.
* MFR+ILV: The delete using native path test deletes the file, but then checking the attribute using that native path doesn't return with invalid attributes.
	   This indicates that the check for the deletion marker only is in place when the package path is requested.  There appears no way to determine this
	   situation from one where the native file exists and it was never in the package.  A possibility would be to add an additional marker in Delete file(etc) such
	   as an extra xxx.yyy.deleted file in the redirection area.  But then all methods looking to see files would have to look for this, and anything creating a file might have to remove it.
	   Needs more thought on finding a way to distinguish.
v.2023.0828
* PsfRuntime: Cross architecture issues for injection of PsfRuntime. Modification to allow RunDll32.exe and RunDll64.exe to be located anywhere in the package.
  Foxta has an x64 process trying to launch a 32-bit process.  So RunDll32.exe must be used.  The code in CreateProcessHook, CreateProcessWithPsfRunDll, 
  has an explicit assumption that RunDll32 will be located at the root of the package.  It should search for the file similar to how we handle the dlls.  
  Should we be checking the bitness of the two processes before trying to inject, skip the direct inject and call the appropriate RunDllXX.exe?

v.2023.08013
 * More standard level debugging (_Debug) on RegLegacyFixup for calls to Delete things.
 * PsfRuntime: Fix to call to SetDllDirectory with null path (to restore order), added SetDefaultDllDirectories for debugging too.
 * MfrFixup: ShellExecute was being recursive and crashing.

v.2023.07.03
 * Fix to RegLegacy that caused ony first rule to be tested.
 * Fix for MFR in IlvMode when package files have been deleted.

v.2023.06.05
 * PsfRuntime: Fix issue with mixed bit processes and injection of PsfRuntime into new process when the Psf components are not located in the 
   root folder of the package (i.e. PsfTooling was used).

 

 v.2023.02.05
 * MFR: Add UserProgramFiles to the VFS Traditional mappings.
 * MFR: Fix IsCreateForChange to consider FILE_ALL_ACCESS before BACKUP_SEMANTICS.
 * MFR: Potential fix for CreateFile,CreateFile2 only - and only on redir case, to try package directly. (Spyder).
 * Launcher: Add UserProgramFiles to ArgumentVirtualization List
 * MFR: Add intercept to kerbase.dll version of MoveFileExW as the kernel32.dll version may be bypassed (Audacity).
 * PsfRuntime: Add intercept to CreateProcessAsUserA/W.
 * MFR: Avoid dll initialization crash when multiple processes are injecting at the same time.
 * MFR: Don't redirect C:\Program Files\WindowsApps
 * MFR: Add pipe support.
 * DynDll: Handle dll loading using '/' for path separations.
 
 v.2022.12.11
 * MFR: Add an ILV-Aware mode for MFR. Could simplify some things.
 * MFR: Add support for SetCurrentDirectory ILV-Aware mode to force path to be a
        package path when appropriate. When an app uses this API to change the current directory,
		this will map the request to use the equivalent package path if that folder exists in the package.
 * RegLeg: Add _Debug Preprocessor to debug builds.
 * RegLeg: Adjust Full2MaxAllowed to a better fixup than MAXIMUM_ALLOWED so that
 *         apps can create subkeys.
 * RegLeg: Update documentation to clarify dependencies on release build also.
 * Debug Builds: Turned off the second level of debugging (MOREDEBUG) in debug builds. That
			extra level of debugging is only needed for debugging the PSF itself, not for
			debugging app issues that IT Pros can use.

v.2022.12.05
 * Created new Managed File Redirection Fixup (MFRFixup) as a potential replacement for FileRedirectionFixup
 * Fix issue in DynamicLibraryFixup with certain mixes of bitness.
 * Fixup a mistake commonly made for the exe and working directory of the application record in the config.json; "\\VFS\\..." means they really wanted "VFS\\..."
 * Support by ignoring the shell file references in FRF/MFR, i.e. shell::{guid} or just ::{guid} used in older file picker dialogs.
 * Support by ignoring for the old-style DOS special objects in FRF/MFR, e.g COM4: or LPT2: or CONOUT$
 * Alter attempts to open a native directory to list files to open the native directory.  Not an ideal solution, but better than going to the redirection area.
 * Add intercepts of ShellExecute and ShellExecuteEx for debugging purposes without changes.
 * Fix argument virtualization for 32-bit launcher.
 * [Post 11.10] Fix MFR overrides.
 * MFR: Treat .exe.Config as a COW even if it isn't. (mRemoteNG/Winforms issue).  Then removed.

v.2022.08.05
* Incorporate platform changes per Microsoft
* PathRedirectonV2 fix for DeVFS calculation.
* Renumber debug instance startin numbers.  FRF=0, DynLib=30k Env=40k RegLeg=50k
* Allow Copy and Rename fixups to handle empty redirected destinations and sources only in redirected area.

v.2022.07.10
* Fix DynamicLibraryFixup to allow for mixed cases in call by app.
* Fix for CreateFile when request is to the redirected area directly and file either exists already there or the request was to CREATE_ALWAYS.
* Fix DeleteDirectory to allow deletion of redirected directory (even though the package folder will still be present).
* WIP: Add intercepts for many ucrtbased (POSIX) file system calls.  
  The code is currenly defined out, and would only intercept, and log (debug build only), and call the original function if enabled.  
  This was an attempt to determine if some of these functions skip the kernel32 library and jump under our intercepts there.
  Ultimately conditionally compiled these out as they A) Didn't intercept for some reason. B) Were determined to not be needed.
* Added intercept for ReadDirectoryChangesW and ReadDirectoryChangesExW that only log the calls.  
	Until we find an app that requires modification, this is the next best thing.

v.2022.06.08